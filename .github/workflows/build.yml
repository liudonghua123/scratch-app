name: build
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
        default: 'main'
      tag_version:
        description: 'The version of scratch-gui upstream, eg: use 3.0.27 instead of v3.0.27'
        required: true
        default: '3.0.27'

env:
  APP_NAME: scratch-app

jobs:
  build-depolyable-static-files:
    name: Build depoly files for ${{ github.event.inputs.tag_version }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: 'Checkout and push specified tag version of scratch'
        run: |
          git config --global pull.rebase false
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          cd scratch-gui
          git status
          git remote -v
          git fetch --all --tags
          git checkout tags/v${{ github.event.inputs.tag_version }}
          git status
          cd ..
          git add scratch-gui
          git commit -m "update scratch-gui to v${{ github.event.inputs.tag_version }}"
          # update version in README.md using sed
          sed -i "s/[0-9]\+\.[0-9]\+\.[0-9]\+/${{ github.event.inputs.tag_version }}/g" README.md
          git add README.md
          git commit -m "update README.md"
          git tag ${{ github.event.inputs.tag_version }}
          git push
          git push --tag
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: 'npm'
      - name: 'Building scratch-gui'
        run: |
          npm install
          npm run build
        working-directory: scratch-gui
      - name: Prepare build files achive
        run: |
          7z a -tzip ${{env.APP_NAME}}-${{ github.event.inputs.tag_version }}.zip -r ./scratch-gui/build/*
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: scratch-dist
          path: ${{env.APP_NAME}}-${{ github.event.inputs.tag_version }}.zip
      - name: 'Publish build files achive to release'
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          file: ${{env.APP_NAME}}-${{ github.event.inputs.tag_version }}.zip
          tags: true
          draft: false
          overwrite: true

  build-native-executable:
    name: 'Build native executable'
    needs: [build-depolyable-static-files]
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
            executable_extension: ''
          - os: 'macos-latest'
            label: 'macos'
            executable_extension: ''
          - os: 'windows-latest'
            label: 'windows'
            executable_extension: '.exe'
    runs-on: ${{matrix.os}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/download-artifact@v2
        with:
          name: scratch-dist
      - name: Extract scratch-dist
        run: |
          rm -rf dist
          unzip ${{env.APP_NAME}}-${{ github.event.inputs.tag_version }}.zip -d dist
        shell: bash
      - name: Display structure of downloaded files
        run: ls -l . dist
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: 'yarn'
      - name: check toolchain version
        run: |
          node --version
          npm --version
          yarn --version
          rustc --version
          cargo --version
      - name: 'Setup for linux'
        if: matrix.os == 'ubuntu-latest'
        run: |
          # https://ubuntu.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts
          # https://askubuntu.com/questions/1252062/how-to-install-libncurses-so-5-in-ubuntu-20-04
          # https://askubuntu.com/questions/522372/installing-32-bit-libraries-on-ubuntu-14-04-lts-64-bit
          # sudo add-apt-repository universe
          sudo dpkg --add-architecture i386 
          sudo apt update
          # install both 32-bit and 64-bit prerequisites of tauri
          # libayatana-appindicator3-dev is the successor of libappindicator3-dev and 64-bit only
          # https://tauri.app/v1/guides/getting-started/prerequisites/#setting-up-linux
          # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
          echo FIX INSTALL FAILED ON GITHUB UBUNTU 22.04 RUNNER
          sudo apt install -y libgcc-s1:i386 libstdc++6:i386 libgdk-pixbuf-2.0-dev:i386 libgdk-pixbuf2.0-dev:i386 libatomic1:i386
          echo install tools for 32-bit support ...
          sudo apt install -y --allow-downgrades \
            gcc-multilib \
            g++-multilib
          echo install 32-bit dependences ...
          sudo apt install -y --allow-downgrades \
            libwebkit2gtk-4.0-dev:i386 \
            libssl-dev:i386 \
            libgtk-3-dev:i386 \
            librsvg2-dev:i386 || echo "install 32-bit dependences failed! Check the logs for details."
          echo install dependences ...
          sudo apt install -y --allow-downgrades \
            libwebkit2gtk-4.0-dev \
            libssl-dev \
            libgtk-3-dev \
            librsvg2-dev \
            libayatana-appindicator3-dev
          echo 'ok'
      - name: 'Setup for macos'
        if: matrix.os == 'macos-latest'
        run: |
          echo 'ok'
      - name: 'Setup for windows'
        if: matrix.os == 'windows-latest'
        run: |
          # choco install visualstudio2019-workload-vctools
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#visual-studio-enterprise-2019
          echo 'ok'

      - name: Build Native binarys on ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-unknown-linux-gnu -v -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
          export PKG_CONFIG_SYSROOT_DIR=/
          yarn tauri build -t i686-unknown-linux-gnu -v -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          echo "build native binarys finished"
      - name: Build Native binarys on macos
        if: matrix.os == 'macos-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-apple-darwin -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          yarn tauri build -t aarch64-apple-darwin -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          echo "build native binarys finished"
      - name: Build Native binarys on windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-pc-windows-msvc -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          yarn tauri build -t i686-pc-windows-msvc -c "{\"package\":{\"version\":\"${{ github.event.inputs.tag_version }}\"}}"
          echo "build native binarys finished"
        shell: bash
      - name: Display structure of build files
        continue-on-error: true
        run: |
          ls -lR src-tauri/target/
        shell: bash

      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        run: |
          # for 64-bit binary
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.AppImage
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.deb
          # for 32-bit binary
          mv src-tauri/target/i686-unknown-linux-gnu/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386${{matrix.executable_extension}}
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.AppImage
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.deb
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'macos-latest'
        run: |
          mv src-tauri/target/x86_64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.app.zip ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
          mv src-tauri/target/aarch64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_aarch64${{matrix.executable_extension}}
          mv src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_aarch64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_aarch64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_aarch64.app.zip ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'windows-latest'
        run: |
          mv src-tauri/target/x86_64-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.msi
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64-setup.exe ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64-setup.exe
          mv src-tauri/target/i686-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86${{matrix.executable_extension}}
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x86_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86.msi
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/nsis/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x86-setup.exe ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86-setup.exe
        shell: bash

      - name: Display structure of build files
        run: |
          ls -l .
        shell: bash
        
      - name: 'Publish binary to release'
        continue-on-error: true
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          file: ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}*
          tags: true
          draft: false
          overwrite: true